0.5.9

* allow Gradle to generate test reports even when a test class processing failed
  due to failure at test worker start. Those tes classes are reported in the report as failed

0.5.8

* Java9+ support

0.5.7

* Gradle 4.8 support
* added logic to correctly detect the Java version available in the test images

0.5.6

* invoke afterContainerStop clojure before informing Gradle test framework that the container has stopped
* do not wait indefinitely for container to start, set timeout to 30sec
* do not wait indefinitely to attach to container's stdin and stdout, set timeout to 30sec

0.5.5

* Gradle 4.2 support

0.5.4

* in a multiproject build, when running tests tasks in parallel, the number of test worker
  at any time must not be higher than the max allowed

0.5.3

* Gradle 3.5 support

0.5.2

* When forcing test-worker JVM exit, print message on the standard error instead logging it.
  Perform Runtime.halt() from a daemon thread, so that it happens only if the regular
  shutdown process gets stuck.

0.5.1

* Gradle 3.4 support

0.5

* use docker-java client instead local docker cli for communication with Docker host
* added beforeContainerCreate, afterContainerCreate, beforeContainerStart, afterContainerStart, afterContainerStop
  interceptors that enable hooking/customizing the testing process
* removed support for inspectArgs closure, use beforeContainerCreate closure instead
* a custom client can be specified via client property of the docker extension. The property can point to a DockerClient
  instance, or to a closure that is invoked before a test worker container. This opens up the possibility to run
  tests in a cluster, applying custom scheduling mechanism.

0.4.2

* Gradle 2.14 support

0.4.1

* fixed calculation of max workers when no test tasks are executed through docker

0.4

* Improved test queue management over the default used by Gradle test tasks.
  This leads to better usage of available resources and much shorter test rounds
  when running tests in parallel (test.maxParallelForks > 1)
  